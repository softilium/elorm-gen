{{ define "dbcontext" }}
// THIS IS GENERATED CODE. DO NOT MODIFY IT
package {{.GoPackageName}}

import (
	"github.com/softilium/elorm"
	"time"
)

{{ range .Entities }}

// {{.ObjectName}} class
//////

type {{ .ObjectName }}DefStruct struct {
	*elorm.EntityDef
	Ref         *elorm.FieldDef
	IsDeleted   *elorm.FieldDef
	DataVersion *elorm.FieldDef
	{{ range .Columns}}
	{{ .Name }} *elorm.FieldDef 
	{{ end }}

}

type {{ .ObjectName }} struct {
	*elorm.Entity
	{{ range .Columns }}
	field_{{ .Name }} {{ if .IsString }} *elorm.FieldValueString{{ end }}{{ if .IsRef }} *elorm.FieldValueRef{{ end }}{{ if .IsBool }} *elorm.FieldValueBool{{ end }}{{ if .IsInt }} *elorm.FieldValueInt{{ end }}{{ if .IsNumeric }} *elorm.FieldValueNumeric{{ end }}{{ if .IsDateTime }} *elorm.FieldValueDateTime{{ end }}{{ end }}
}

{{ range .Columns}}

{{ if .IsString }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() string {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueString)
	}
	return T.field_{{.Name}}.Get()
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue string) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueString)
	}
	T.field_{{.Name}}.Set(newValue) 
}
{{ end }}

{{ if .IsRef }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() *{{.RefTypeName}} {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueRef)
	}
	r,err := T.field_{{.Name}}.Get()
	if err!=nil {
		panic(err)
	}
	return r.(*{{.RefTypeName}}) 
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue *{{.RefTypeName}}) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueRef)
	}
	err := T.field_{{.Name}}.Set(newValue) 
	if (err!=nil) {
		panic(err)
	}
}
{{ end }}

{{ if .IsBool }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() bool {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueBool)
	}
	return T.field_{{.Name}}.Get()
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue bool) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueBool)
	}
	T.field_{{.Name}}.Set(newValue) 
}
{{ end }}

{{ if .IsInt }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() int64 {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueInt)
	}
	return T.field_{{.Name}}.Get()
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue int64) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueInt)
	}
	T.field_{{.Name}}.Set(newValue) 
}
{{ end }}

{{ if .IsNumeric }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() float64 {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueNumeric)
	}
	return T.field_{{.Name}}.Get()
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue float64) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueNumeric)
	}
	T.field_{{.Name}}.Set(newValue) 
}
{{ end }}

{{ if .IsDateTime }}
func (T *{{.Owner.ObjectName}}) {{.Name}}() time.Time {	
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueDateTime)
	}
	return T.field_{{.Name}}.Get()
}

func (T *{{.Owner.ObjectName}}) Set{{.Name}}(newValue time.Time) { 
	if T.field_{{.Name}} == nil {
		T.field_{{.Name}} = T.Values["{{.Name}}"].(*elorm.FieldValueDateTime)
	}
	T.field_{{.Name}}.Set(newValue) 
}
{{ end }}

{{ end }}

{{ end }}

// DbContext core
//////

type DbContext struct {
	*elorm.Factory{{ range .Entities }}
{{ .ObjectName}}Def {{.ObjectName}}DefStruct{{ end }}
}

func CreateDbContext(dbDialect string, connectionString string) (*DbContext, error) {

	var err error
	r := &DbContext{}
	r.Factory, err = elorm.CreateFactory(dbDialect, connectionString)
	if err != nil {
		return nil, err
	}

{{ range .Entities }}

	// {{.ObjectName}}
	////// 

	r.{{.ObjectName}}Def.EntityDef, err = r.CreateEntityDef("{{.ObjectName}}","{{.TableName}}")
	if err != nil {
		return nil, err
	}
	r.{{ .ObjectName }}Def.Ref = r.{{ .ObjectName }}Def.FieldDefByName("Ref")
	r.{{ .ObjectName }}Def.IsDeleted = r.{{ .ObjectName }}Def.FieldDefByName("IsDeleted")
	r.{{ .ObjectName }}Def.DataVersion = r.{{ .ObjectName }}Def.FieldDefByName("DataVersion")
	{{ range .Columns }}
	r.{{.Owner.ObjectName}}Def.{{.Name}}, _ ={{ if .IsString }}r.{{.Owner.ObjectName}}Def.AddStringFieldDef("{{.Name}}", {{.Len}}, ""){{ end }}{{ if .IsRef }}r.{{.Owner.ObjectName}}Def.AddRefFieldDef("{{.Name}}", r.{{.RefTypeName}}Def.EntityDef){{ end }}{{ if .IsBool }}r.{{.Owner.ObjectName}}Def.AddBoolFieldDef("{{.Name}}", false){{ end }}{{ if .IsInt }}r.{{.Owner.ObjectName}}Def.AddIntFieldDef("{{.Name}}", 0){{ end }}{{ if .IsNumeric }}r.{{.Owner.ObjectName}}Def.AddNumericFieldDef("{{.Name}}", {{.Precision}},{{.Scale}}, 0){{ end }}{{ if .IsDateTime }}r.{{.Owner.ObjectName}}Def.AddDateTimeFieldDef("{{.Name}}"){{ end }}{{ end }}

	r.{{.ObjectName}}Def.Wrap = func(source *elorm.Entity) any { return &{{.ObjectName}}{Entity: source} }
{{ end }}

	return r, nil
}

{{ range .Entities }}

func (T *DbContext) Create{{.ObjectName}}() (*{{.ObjectName}}, error) {
	r, err := T.CreateEntityWrapped(T.{{.ObjectName}}Def.EntityDef)
	if err != nil {
		return nil, err
	}
	rt := r.(*{{.ObjectName}})
	return rt, nil
}

func (T *DbContext) Load{{.ObjectName}}(Ref string) (*{{.ObjectName}}, error) {
	r, err := T.LoadEntityWrapped(Ref)
	if err != nil {
		return nil, err
	}
	rt := r.(*{{.ObjectName}})
	return rt, nil
}

{{ end }}

{{ end }}